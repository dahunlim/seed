#!/usr/bin/env node
const debug = require('debug')('was:server')
    , http = require('http')
    , fs = require('fs')
    , port = normalizePort(process.env.PORT || '3000')
    , app = require('../app')
    , DB = require('../core/Database');


app.set('port', port);
const server = http.createServer(app);

/**
 * DB initialize
 */
DB.initialize().then(() => {

    // Server listen
    server.listen(port);
});

server.on('error', (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }
    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
});
server.on('listening', () => {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
});

function normalizePort(val) {
    var port = parseInt(val, 10);
    if (isNaN(port)) {
        return val;
    }
    if (port >= 0) {
        return port;
    }
    return false;
}